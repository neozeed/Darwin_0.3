###############################################################################
# Copyright (c) 1999 Apple Computer, Inc. All rights reserved.
#
# @APPLE_LICENSE_HEADER_START@
# 
# "Portions Copyright (c) 1999 Apple Computer, Inc.  All Rights
# Reserved.  This file contains Original Code and/or Modifications of
# Original Code as defined in and that are subject to the Apple Public
# Source License Version 1.0 (the 'License').  You may not use this file
# except in compliance with the License.  Please obtain a copy of the
# License at http://www.apple.com/publicsource and read it before using
# this file.
# 
# The Original Code and all software distributed under the License are
# distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
# INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT.  Please see the
# License for the specific language governing rights and limitations
# under the License."
# 
# @APPLE_LICENSE_HEADER_END@
###############################################################################
#  NeXT Makefile.postamble Template
#  Copyright 1993, NeXT Computer, Inc.
#
#  This Makefile is used for configuring the standard app makefiles associated
#  with ProjectBuilder.  
#  
#  Use this template to set attributes for a project, sub-project, bundle, or
#  palette.  Each node in the project's tree of sub-projects and bundles 
#  should have it's own Makefile.preamble and Makefile.postamble.  Additional
#  rules (e.g., after_install) that are defined by the developer should be
#  defined in this file.
#
###############################################################################
# 
# Here are the variables exported by the common "app" makefiles that can be 
# used in any customizations you make to the template below:
# 
#	PRODUCT_ROOT - Name of the directory to which resources are copied.
#	OFILE_DIR - Directory into which .o object files are generated.
#		    (Note that this name is calculated based on the target 
#		     architectures specified in Project Builder).
#	DERIVED_SRC_DIR - Directory used for all other derived files
#	ALL_CFLAGS - All the flags passed to the cc(1) driver for compilations
#
#	NAME - name of application, bundle, subproject, palette, etc.
#	LANGUAGE - langage in which the project is written (default "English")
#	LOCAL_RESOURCES - localized resources (e.g. nib's, images) of project
#	GLOBAL_RESOURCES - non-localized resources of project
#	PROJECTVERSION - version of ProjectBuilder project (NS3.X = 1.1, NS4.0 = 2.0)
#	ICONSECTIONS - Specifies icon sections when linking executable 
#
#	CLASSES - Class implementation files in project.
#	HFILES - Header files in project.
#	MFILES - Other Objective-C source files in project. 
#	CFILES - Other C source files in project. 
#	PSWFILES - .psw files in the project
#	PSWMFILES - .pswm files in the project
#	SUBPROJECTS - Subprojects of this project
#	BUNDLES - Bundle subprojects of this project
#	OTHERSRCS - Other miscellaneous sources of this project
#	OTHERLINKED - Source files not matching a standard source extention
#
#	LIBS - Libraries to link with when making app target
#	DEBUG_LIBS - Libraries to link with when making debug target
#	PROF_LIBS - Libraries to link with when making profile target
#	OTHERLINKEDOFILES - Other relocatable files to (always) link in.
#
#	APP_MAKEFILE_DIR - Directory in which to find generic set of Makefiles
#	MAKEFILEDIR - Directory in which to find $(MAKEFILE)
#	MAKEFILE - Top level mechanism Makefile (e.g., app.make, bundle.make)
#	INSTALLDIR - Directory app will be installed into by 'install' target
#
###############################################################################


# Change defaults assumed by the standard makefiles here.  Edit the 
# following default values as appropriate. (Note that if no Makefile.postamble 
# exists, these values will have defaults set in common.make).

# Versioning of frameworks, libraries, bundles, and palettes:
# Set to "NO" to produce a compatibility binary
CURRENTLY_ACTIVE_VERSION = YES
DEPLOY_WITH_VERSION_NAME = B
COMPATIBILITY_PROJECT_VERSION = 1

# Some compiler flags can be easily overridden here, but onlytake effect at 
# the top-level:
#OPTIMIZATION_CFLAG = -O
#DEBUG_SYMBOLS_CFLAG = -g
#WARNING_CFLAGS = -Wall
#DEBUG_BUILD_CFLAGS = -DDEBUG
#PROFILE_BUILD_CFLAGS = -pg -DPROFILE

# Flags passed to yacc
#YFLAGS = -d

# Library and Framework projects only:
# 1. If you want something other than the default .dylib name, override it here
#DYLIB_INSTALL_NAME = lib$(NAME).dylib

# 2. If you want to change the -install_name flag from the absolute path to the development area, change it here.  One good choice is the installation directory.  Another one might be none at all.
#DYLIB_INSTALL_DIR = $(INSTALLDIR)

# Ownership and permissions of files installed by 'install' target
#INSTALL_AS_USER = root        # User/group ownership 
#INSTALL_AS_GROUP = wheel      # (probably want to set both of these) 
#INSTALL_PERMISSIONS =         # If set, 'install' chmod's executable to this

# Options to strip for various project types. Note: -S strips debugging symbols
#    (executables can be stripped down further with -x or, if they load no bundles, with no
#     options at all).
#APP_STRIP_OPTS = -S
#TOOL_STRIP_OPTS = -S
#LIBRARY_STRIP_OPTS = -S   # for .a archives
#DYNAMIC_STRIP_OPTS = -S   # for bundles and shared libraries

#########################################################################
# Put rules to extend the behavior of the standard Makefiles here.  "Official" 
# user-defined rules are:
#   * before_install
#   * after_install
#   * after_installhdrs
# You should avoid redefining things like "install" or "app", as they are
# owned by the top-level Makefile API and no context has been set up for where 
# derived files should go.
# ARGON_PROJECTS = c curses info kvm m telnet util des macho libstreams remote machkit librld libgcc
ARGON_PROJECTS = c curses libedit info kvm libmacho librld m objc4 streams
DYNAMIC_ONLY = libdyld
#GMON = gmon
GREP = /bin/grep
# x_ = libgcc yp mach machkit internat edit sound
#
#	libgcc is part of libc (gnu.subproj)
#	mach is currently part of libc - not for long
#	yp has been consumed by libinfo
#	machkit is obsolete (tied to remote)
#	remote is obsolete (tined to machkit)
#	internet is obsolete
#	edit is in conflict with 4.4
#	sound has been moved to SoundKit
#

# FIXME when we have the latest cc from 4.2mach
LIBTOOL=/usr/bin/libtool
DYNAMIC_PROJDIRS = $(ARGON_PROJECTS) $(DYNAMIC_ONLY)

make_links::
	@(if [ ! -f $(OFILE_DIR)/links/.all_done ]; then\
		$(MKDIRS) $(OFILE_DIR)/links;\
		cd $(OFILE_DIR)/links;\
		bail=NO;\
            if [ "$(BUILD_TARGET)" = framework ]; then\
		dirs="$(DYNAMIC_PROJDIRS)";\
		obj_dir=dynamic;\
            elif [ "$(BUILD_TARGET)" = profile ]; then\
		dirs="$(DYNAMIC_PROJDIRS)";\
		obj_dir=dynamic_profile;\
            else\
		echo "#### $(BUILD_TARGET) is not a suitable target";\
		exit 1;\
            fi;\
			echo ========== Creating $$obj_dir links for ${TARGET_ARCH} ==========;\
			for i in $$dirs; do\
				echo -n "Linking $$i to ";\
				name=$$i;\
				case $$i in\
					c)			proj=Lib$$i; name=$$i;;\
					curses)			proj=Lib$$i; name=$$i;;\
					libedit)		proj=Libedit; name=$$i;;\
					info)			proj=Lib$$i; name=$$i;;\
					kvm)			proj=Lib$$i; name=$$i;;\
					gmon)			proj=Lib$$i; name=$$i;;\
					m)			proj=Lib$$i; name=$$i;;\
					rpcsvc)			proj=Lib$$i; name=$$i;;\
					telnet)			proj=Lib$$i; name=$$i;;\
					util)			proj=Lib$$i; name=$$i;;\
					y)			proj=Lib$$i; name=$$i;;\
					streams)	 	proj=Lib$$i; name=$$i;;\
					db)	 		proj=lib$$i; name=$$i;;\
					librld)			proj=cctools/ld; name=$$i;;\
					libdyld)		proj=cctools/libdyld; name=$$i;;\
					libmacho)		proj=cctools/libmacho; name=$$i;;\
					libgcc)			proj=cc; name=$$i;;\
					*)			proj=$$i; name=$$i;;\
				esac;\
				rm -rf $$name;\
				$(MKDIRS) $$name;\
				root=$(SUBLIBROOTS)/$$proj;\
				if [ -d $$root/$${obj_dir}_obj/${TARGET_ARCH} ]; then\
					echo -n $$root/$${obj_dir}_obj/${TARGET_ARCH};\
					$(LN) $$root/$${obj_dir}_obj/${TARGET_ARCH} $$name/$${obj_dir}_obj;\
				elif [ -d $$root/$${obj_dir}_${TARGET_ARCH}_obj ]; then\
					echo -n $$root/$${obj_dir}_${TARGET_ARCH}_obj;\
					$(LN) $$root/$${obj_dir}_${TARGET_ARCH}_obj $$name/$${obj_dir}_obj;\
				elif [ -d $$root/$${obj_dir}_obj ]; then\
					echo -n $$root/$${obj_dir}_obj;\
					$(LN) $$root/$${obj_dir}_obj $$name/$${obj_dir}_obj;\
				elif [ -d $$root/dynamic_obj/${TARGET_ARCH} ]; then\
					echo -n $$root/dynamic_obj/${TARGET_ARCH};\
					$(LN) $$root/dynamic_obj/${TARGET_ARCH} $$name/$${obj_dir}_obj;\
				elif [ -d $$root/dynamic_obj ]; then\
					echo -n $$root/dynamic_obj;\
					$(LN) $$root/dynamic_obj $$name/$${obj_dir}_obj;\
				else\
					echo "##### No $$root/$${obj_dir}_obj/${TARGET_ARCH}";\
					bail=YES;\
					continue;\
				fi;\
				if [ -f $$name/$${obj_dir}_obj/$$name.ofileList ]; then\
					$(LN) $${obj_dir}_obj/$$name.ofileList $$name/ofileList;\
				else\
					echo "#####No $$name/$${obj_dir}_obj/$$name.ofileList";\
					bail=YES;\
					continue;\
				fi;\
				echo " done.";\
			done;\
			if [ "$$bail" = YES ]; then\
				exit 1;\
			fi;\
		if [ "$$bail" = YES ]; then\
			exit 1;\
		fi;\
		touch $(OFILE_DIR)/links/.all_done;\
	fi)

set_extra_libtool_flags =\
	cd $(OFILE_DIR)/links ;\
	if [ "$(BUILD_TARGET)" = framework ]; then\
		link_dir=dynamic;\
		ofileList_flags="$(DYNAMIC_SECTORDER_FLAGS) " ;\
	else\
		link_dir=dynamic_profile;\
		ofileList_flags="" ;\
	fi;\
	for subproj in $(DYNAMIC_PROJDIRS) ; do\
			ofileList_flags="$$ofileList_flags -filelist $$subproj/ofileList,$$subproj/$${link_dir}_obj";\
	done; \
	ofileList_flags="$$ofileList_flags -lcc_dynamic"
